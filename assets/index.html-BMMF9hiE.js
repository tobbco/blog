import{_ as a,c as o,a as e,o as i}from"./app-DLwuheDP.js";const n={};function s(r,t){return i(),o("div",null,t[0]||(t[0]=[e('<h2 id="java中object类的方法详解" tabindex="-1"><a class="header-anchor" href="#java中object类的方法详解"><span>Java中Object类的方法详解</span></a></h2><ol><li><strong>getClass()</strong> - 获取运行时的Class对象，属于反射的内一套，获取运行的一些数据。</li><li><strong>hashCode()</strong> - 返回对象的<code>hash</code>值。目的是为了更好的支持哈希表，比如基于Java中的HashMap使用</li><li><strong>equals()</strong> - 比较两个对象是否相等，默认 <code>==</code></li><li><strong>clone()</strong> - 创建对象的副本。深拷贝和浅拷贝的内容 <ol><li>默认是浅拷贝，将当前对象复制一份，其中的基本数据类型直接复用值，引用数据类型是复用地址值。</li><li>深拷贝，将当前对象复制一份，其中的基本数据类型直接复用值，引用数据类型会重新的创建一个，不会复制之前的地址。 深拷贝要自己编写克隆内部的引用类型对象。</li></ol></li><li><strong>toString</strong> - 返回一个以字符串形式表示当前对象的信息。</li><li><strong>wait</strong> - 当某个线程<strong>持有当前对象锁</strong>时，可以执行对象锁.wait，将持有对象锁的线程挂起等待。</li><li><strong>notify</strong> - 当某个线程<strong>持有当前对象锁</strong>时，可以执行对象锁.notify，唤醒之前基于wait挂起的一个线程。</li><li><strong>notifyAll</strong> - 当某个线程<strong>持有当前对象锁</strong>时，可以执行对象锁.notifyAll方法，唤醒之前所有基于wait挂起的线程。</li><li><strong>finalize</strong> - 当触发垃圾回收时，如果当前对象无法基于可达性分析定位到，就会被垃圾回收器回收掉，在回收之前，如果这个对象重写了<code>finalize</code>，那就会触发<code>finalize</code>方法执行。可以执行一些其他的清理工作。（Finalize在JVM中，<strong>他不保证一定执行，他用的守护线程</strong>）</li></ol>',2)]))}const c=a(n,[["render",s],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/article/6jq11dui/","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","createTime":"2025/03/17 02:45:09","permalink":"/article/6jq11dui/"},"headers":[],"readingTime":{"minutes":1.51,"words":453},"git":{"updatedTime":1739513825000,"contributors":[{"name":"xianchaoye","username":"xianchaoye","email":"18201082822@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/xianchaoye?v=4","url":"https://github.com/xianchaoye"}]},"filePathRelative":"notes/面试/Java基础.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"296ab0","sort":10002,"name":"面试"}],"bulletin":false}');export{c as comp,g as data};
